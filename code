#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
#include <string>
using namespace std;
typedef int int32_t;
typedef unsigned int uint32_t;
typedef unsigned short int uint16_t;

#pragma pack(push, 1)
struct BMPFileHeader {					//file header BMP
    uint16_t file_type{0x4D42};          // BM 
    uint32_t file_size{0};               // in bits
    uint16_t reserved1{0};               // 0
    uint16_t reserved2{0};               // 0
    uint32_t offset_data{0};             // start pixels
};
#pragma pack(pop)
struct BMPInfoHeader {					//photo header BMP
 uint32_t size{ 0 };                      // length of header
 int32_t width{ 0 };                      // width of header
 int32_t height{ 0 };                     // height                                
 uint16_t planes{ 1 };                    // always 1
 uint16_t bit_count{ 0 };                 // bits per pixel
 uint32_t compression{ 0 };               // 0 - uncompressed
 uint32_t size_image{ 0 };                // 0 for uncompressed
 int32_t x_pixels_per_meter{ 0 };			//resolution horizontal
 int32_t y_pixels_per_meter{ 0 };			//resolution vertical
 uint32_t colors_used{ 0 };               // used colors
 uint32_t colors_important{ 0 };          // important colors
};

struct BMPColorHeader {
	uint32_t red_mask{ 0x00ff0000 };         // red
	uint32_t green_mask{ 0x0000ff00 };       // green
	uint32_t blue_mask{ 0x000000ff };        // blue
    uint32_t color_space_type{ 0x73524742 }; // RGB
    uint32_t unused[16]{ 0 };                // unused
};

struct BMP 
{
    BMPFileHeader file_header;
    BMPInfoHeader bmp_info_header;
    BMPColorHeader bmp_color_header;
    char * raw_data;
    unsigned char * data;
	int datasize;
	BMP(const char *fname) 
	{
    	read(fname);
    }

    void read(const char *fname) 
	{
    	ifstream inp{fname, ios_base::binary};
    	if (inp) 
		{
        	inp.read((char*)&file_header, sizeof(file_header));
			if(file_header.file_type != 0x4D42) 
			{
                system("cls");
        		cout<<"Invalid file type\n\n";
				system("pause");
				exit (0);
       		}
    		inp.read((char*)&bmp_info_header, sizeof(bmp_info_header));
          
        	inp.seekg(file_header.offset_data, inp.beg); 	// jump to pixels
 
           	bmp_info_header.size = sizeof(BMPInfoHeader);											//input data into structs
           	file_header.offset_data = sizeof(BMPFileHeader) + sizeof(BMPInfoHeader);
        	file_header.file_size = file_header.offset_data;
 			datasize= bmp_info_header.width * bmp_info_header.height * bmp_info_header.bit_count / 8;	
        	raw_data=new  char [datasize];
 			data=new unsigned char [datasize];
        	// padding
        	inp.read(raw_data, datasize );
        	data=reinterpret_cast<unsigned char *>(raw_data);
        	file_header.file_size += datasize;
    	}
    	else 
		{
			system("cls");
        	cout<<"Invalid file name\n\n";
			system("pause");
			exit (0);
    	}
	}
    void write(const char *fname) 
	{
     	ofstream output;
     	
    }
 
 
 };

int main()
{ 
	string name;							//specifying a file name
	cout<<"Enter the name of the file: ";	
	cin>>name;
	const char* n=name.c_str();
	BMP bmp=BMP(n);
	
	
	
	
	cout<<"-----BMP file header-----"<<endl;
	cout<<"File signature: BM"<<endl;
	cout << "File length: "<< bmp.file_header.file_size<< endl;
	cout << "reserved1: " <<bmp.file_header.reserved1<<endl;
	cout<< "reserved2: " <<bmp.file_header.reserved2<<endl;
	cout<< "Image data position: "<<bmp.file_header.offset_data<<endl;
	cout<<"-----BMP image header-----"<<endl;
	cout<<"The size of the info header: "<<bmp.bmp_info_header.size<<endl;     
	cout<<"The width of the image in pixels: "<<bmp.bmp_info_header.width<<endl;    
	cout<<"The height of the image in pixels: "<<bmp.bmp_info_header.height<<endl;
	cout<<"Number of bits per pixel: "<<bmp.bmp_info_header.bit_count<<endl;
	cout<<"Compression algorithm: "<<bmp.bmp_info_header.compression<<endl;
	cout<<"Image size: "<<bmp.bmp_info_header.size_image<<endl;
	cout<<"Horizontal resolution: "<<bmp.bmp_info_header.x_pixels_per_meter<<endl;
	cout<<"Vertical resolution: "<<bmp.bmp_info_header.y_pixels_per_meter<<endl;
	cout<<"The number of colors in the palette: "<<bmp.bmp_info_header.colors_used<<endl;
	cout<<"The number of valid colors in the palette: "<<bmp.bmp_info_header.colors_important<<endl;
	
	return 0;
}
